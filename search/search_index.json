{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Reproducible Workflow for CDCC Calculations CMSE890 Fall 2024: Cate Beckman This website hosts the documentation for a reproducible workflow for a nuclear dynamics calculation. The calculation uses the Continuum Discretized Coupled Channels method to obtain reaction observables. Below is a link to the corresponding github repository, which applies the workflow to carbon-15 elastically scattering on deuteron.","title":"Reproducible Workflow for CDCC Calculations"},{"location":"#reproducible-workflow-for-cdcc-calculations","text":"CMSE890 Fall 2024: Cate Beckman This website hosts the documentation for a reproducible workflow for a nuclear dynamics calculation. The calculation uses the Continuum Discretized Coupled Channels method to obtain reaction observables. Below is a link to the corresponding github repository, which applies the workflow to carbon-15 elastically scattering on deuteron.","title":"Reproducible Workflow for CDCC Calculations"},{"location":"cdcc/","text":"Continuum Discretized Coupled Channel Method This page explains key details of the method used in the calculation which this workflow performs. The Continuum Discretized Coupled Channels method, or CDCC, is used to solve nuclear reactions in which breakup of the projectile occurs. The coordinate system for this reaction is shown below. Based on this three body system, this means that the three body Schrodinger equation needs to be solved in order to obtain reaction observables. The tricky component with breakup is that instead of there being only bound states, the wave function for the projectile now has continuous and bound state components as shown below. In CDCC, the continous component is dealt with by discretizing the continuum. The continuum is discretized by the angular momentum included in the problem, and the allowable relative energy between the core and valence parts of the projectile. This splits the continuum into a gridspace, and example of which is shown below. Inside each bin, there many scattering states. In CDCC, the averaging method is used to take a superposition of these scattering states, and this averaged radial wave function is used in solving the coupled channels problem, the equation for which is shown below. Above, alpha and alpha prime denote different channels. The bracketed term can be thought of as the elastic scattering term, and the second term represents all reaction channels for which the physics in the entrance channel is different from the exit channel. This equation is very complicated, but the good news is it is solvable numerically! The next section will give more detail on a program called Fresco, which solves coupled channel nuclear reaction problems numerically.","title":"CDCC Calculations"},{"location":"cdcc/#continuum-discretized-coupled-channel-method","text":"This page explains key details of the method used in the calculation which this workflow performs. The Continuum Discretized Coupled Channels method, or CDCC, is used to solve nuclear reactions in which breakup of the projectile occurs. The coordinate system for this reaction is shown below. Based on this three body system, this means that the three body Schrodinger equation needs to be solved in order to obtain reaction observables. The tricky component with breakup is that instead of there being only bound states, the wave function for the projectile now has continuous and bound state components as shown below. In CDCC, the continous component is dealt with by discretizing the continuum. The continuum is discretized by the angular momentum included in the problem, and the allowable relative energy between the core and valence parts of the projectile. This splits the continuum into a gridspace, and example of which is shown below. Inside each bin, there many scattering states. In CDCC, the averaging method is used to take a superposition of these scattering states, and this averaged radial wave function is used in solving the coupled channels problem, the equation for which is shown below. Above, alpha and alpha prime denote different channels. The bracketed term can be thought of as the elastic scattering term, and the second term represents all reaction channels for which the physics in the entrance channel is different from the exit channel. This equation is very complicated, but the good news is it is solvable numerically! The next section will give more detail on a program called Fresco, which solves coupled channel nuclear reaction problems numerically.","title":"Continuum Discretized Coupled Channel Method"},{"location":"fresco/","text":"Fresco Details Fresco is a code which solves coupled channels problems for nuclear reactions. To install Fresco to use this workflow there are a few options. Download and compile Fresco. a) This can be done on hpcc by cloning this repository, a precompiled version of Fresco is located in the directory \"workflow/fresco\". b) The source code is located in the directory fres. Follow the instructions to compile there. c) Alternatively, Fresco can be downloaded and compiled following the instructions at link . Input To run a CDCC calculation using Fresco, there are inputs that need to be decided upon. In the section Example-15C(d,d')15C, and on the github repository for this workflow, is an example which has a correct input file for carbon-15 scattering on deuteorn. The important inputs are detailed below. 1. Target and Projectile Information: This information is included in the &NUCLEUS section of the input file, which details the mass partitions in the reaction. Charge, mass number, and binding energy are needed. 2. Interactions: The potentials which correspond to the interaction in each mass partition need to be included in the &POT section. These potentials can be found online using RIPL3. 3. Continuum Discretization: The &BIN section is where the user sets the continuum discretization for each partial wave included in the calculation. The energy mesh is defined with start, step, and stop. If energy is set to T, the mesh is in energy, if energy is set to F, the mesh is in momentum. The next section gives detail on Fresco outputs.","title":"Fresco"},{"location":"fresco/#fresco-details","text":"Fresco is a code which solves coupled channels problems for nuclear reactions. To install Fresco to use this workflow there are a few options. Download and compile Fresco. a) This can be done on hpcc by cloning this repository, a precompiled version of Fresco is located in the directory \"workflow/fresco\". b) The source code is located in the directory fres. Follow the instructions to compile there. c) Alternatively, Fresco can be downloaded and compiled following the instructions at link .","title":"Fresco Details"},{"location":"fresco/#input","text":"To run a CDCC calculation using Fresco, there are inputs that need to be decided upon. In the section Example-15C(d,d')15C, and on the github repository for this workflow, is an example which has a correct input file for carbon-15 scattering on deuteorn. The important inputs are detailed below. 1. Target and Projectile Information: This information is included in the &NUCLEUS section of the input file, which details the mass partitions in the reaction. Charge, mass number, and binding energy are needed. 2. Interactions: The potentials which correspond to the interaction in each mass partition need to be included in the &POT section. These potentials can be found online using RIPL3. 3. Continuum Discretization: The &BIN section is where the user sets the continuum discretization for each partial wave included in the calculation. The energy mesh is defined with start, step, and stop. If energy is set to T, the mesh is in energy, if energy is set to F, the mesh is in momentum. The next section gives detail on Fresco outputs.","title":"Input"},{"location":"input/","text":"The github repository located here contains this fully implemented workflow for carbon-15 scattering on deuteron. The input file is set up for the reaction information. The goal of the calculation is to determine the elastic scattering angular distribution for carbon-15 scattering on a deuterium target. First, ensure snakemake is installed where the workflow will be run. The instructions to download snakemake can be found here . Once snakemake is installed where the workflow will be ran, clone the repository using \"git clone https://github.com/cgbeckman/CMSE890Project.git\". The reaction information is all set in the input file, which is located in workflow/input/example-br.in. This means that we are ready to run the calculation. To run the calculation, there are two methods. The first is to run snakemake in the command line. To do so, navigate to \"workflow/\". Then in the command line run \"snakemake\". The second option is for running the calculation on a system which uses slurm job submission. Navigate to the directory \"workflow\". In this directory is a file called \"run_workflow.sb\". To submit the entire workflow to run on hpcc, enter the command \"sbatch run_workflow.sb\" on the command line. This example only takes ~5 seconds to run, and the resulting slurm file will be stored in \"workflow/slurm_files\". The output files will be stored in \"workflow/outputs\". To view the resulting energy integrated angular distribution, and angle integrated energy distribution, navigate to the plots directory stored in \"workflow/outputs/plots/\". Any graphical viewer can be used to view the plots.","title":"Example-15C(d,d')15C"},{"location":"output/","text":"Fresco Ouputs Fresco calculates many reaction observables which are stored in the fort files. The reaction observables of interest for the calculation are the breakup cross section angular distribution. This cross-section is determined by angular integration over energy. The integration is performed by a secondary function called sumbins, which must be compiled separately from compiling fresco. It is stored in fres/util. Passing the file fort.16, which contains the cross-sections for each angular momentum partial wave included in the calculation. The other observable of interest is the relative energy distribution between the core and valence components. The relative energy distributions are obtained by integrating the contents of fort.13 over all angles included in the calculation. This integration is done by the sumxen function, which also needs to be compiled. This function is also stored in fres/util. The next section gives details on the workflow for using Fresco to do a CDCC calculation.","title":"Fresco Output"},{"location":"output/#fresco-ouputs","text":"Fresco calculates many reaction observables which are stored in the fort files. The reaction observables of interest for the calculation are the breakup cross section angular distribution. This cross-section is determined by angular integration over energy. The integration is performed by a secondary function called sumbins, which must be compiled separately from compiling fresco. It is stored in fres/util. Passing the file fort.16, which contains the cross-sections for each angular momentum partial wave included in the calculation. The other observable of interest is the relative energy distribution between the core and valence components. The relative energy distributions are obtained by integrating the contents of fort.13 over all angles included in the calculation. This integration is done by the sumxen function, which also needs to be compiled. This function is also stored in fres/util. The next section gives details on the workflow for using Fresco to do a CDCC calculation.","title":"Fresco Ouputs"},{"location":"workflow/","text":"Workflow Snakemake is used to execute the Fresco calculation, and plot the results. In snakemake, this is done using rules which are contained in a Snakefile. The structure of the Snakefile is explained below. 1. Rule All : The first rule in the snakefile contains all the target outputs in the Snakefile. The outputs for each rule are included here, so that when snakemake runs it knows what targets it is looking for. 2. Run Fresco : The second rule runs the Fresco calculation, using the command line. The secondary functions, the angular and energy integration, are also performed with this rule. All output files are moved, using the command line, to directories for organizational purposes. 3. Test Fresco : The next 5 rules test that the calculation ran properly. This first rule tests that the fort.16 file was created. If the calculation failed, this file will not generate. Other fort files will generate for a failed calculation, which is why fort.16 was chosen for the test. 4. Test Fort.16 NaN : The next rule tests that the output in the fort.16 file are real results. Sometimes there can be errors in the input file which don't cause the calculation to fail, but will result in NaN cross sections. 5. Test Fort.13 NaN : This rule similarily tests that the output of the fort.13 file is not NaN. 6. Test Energy Integration : This file checks that the energy integration worked, by ensuring floats are recorded in the corresponding output file. When the integration does not work the most common sign is that this output file is empty. 7. Test Angle Integration : Similarily to the energy integration test, this rule checks that floats are located in the corresponding output file. 8. Plot the Breakup Cross-Section : This rule calls a python script, located in the directory python_scripts to plot the result of the energy integration. This gives the elastic scattering angular distribution. 9. Plot the Relative Energy Distribution : This rule calls a python script, located in the directory python_scripts to plot the result of the angular integration. The workflow directory is organized as shown below. The next section provides more detail on the example provided in the github repository.","title":"Workflow Details"},{"location":"workflow/#workflow","text":"Snakemake is used to execute the Fresco calculation, and plot the results. In snakemake, this is done using rules which are contained in a Snakefile. The structure of the Snakefile is explained below. 1. Rule All : The first rule in the snakefile contains all the target outputs in the Snakefile. The outputs for each rule are included here, so that when snakemake runs it knows what targets it is looking for. 2. Run Fresco : The second rule runs the Fresco calculation, using the command line. The secondary functions, the angular and energy integration, are also performed with this rule. All output files are moved, using the command line, to directories for organizational purposes. 3. Test Fresco : The next 5 rules test that the calculation ran properly. This first rule tests that the fort.16 file was created. If the calculation failed, this file will not generate. Other fort files will generate for a failed calculation, which is why fort.16 was chosen for the test. 4. Test Fort.16 NaN : The next rule tests that the output in the fort.16 file are real results. Sometimes there can be errors in the input file which don't cause the calculation to fail, but will result in NaN cross sections. 5. Test Fort.13 NaN : This rule similarily tests that the output of the fort.13 file is not NaN. 6. Test Energy Integration : This file checks that the energy integration worked, by ensuring floats are recorded in the corresponding output file. When the integration does not work the most common sign is that this output file is empty. 7. Test Angle Integration : Similarily to the energy integration test, this rule checks that floats are located in the corresponding output file. 8. Plot the Breakup Cross-Section : This rule calls a python script, located in the directory python_scripts to plot the result of the energy integration. This gives the elastic scattering angular distribution. 9. Plot the Relative Energy Distribution : This rule calls a python script, located in the directory python_scripts to plot the result of the angular integration. The workflow directory is organized as shown below. The next section provides more detail on the example provided in the github repository.","title":"Workflow"}]}